// Generated by dart2js (, trust primitives, omit checks, lax runtime type, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.8.0.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_77", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, A, C, F, G, D, E,
  B = {ChapterHolder: function ChapterHolder(t0) {
      this.info = t0;
      this.chapter = null;
    },
    loadBookLoader(that) {
      return B.loadBookLoader$body(that);
    },
    loadBookLoader$body(that) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Book),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], ptr, exception, trace, title, c, byline, t2, t3, exception0, t1, $async$exception0, $async$temp1, $async$temp2, $async$temp3;
      var $async$loadBookLoader = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = that.book;
              if (t1 != null) {
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$temp1 = E;
              $async$temp2 = C.NativeByteData_methods;
              $async$temp3 = J;
              $async$goto = 3;
              return A._asyncAwait(B.getFileFromServer("book_binary/SoYourHomeworld.book"), $async$loadBookLoader);
            case 3:
              // returning from await.
              ptr = $async$temp1.BufferPtr$($async$temp2.get$buffer($async$temp3.asByteData$0$x($async$result)), null, 0);
              $async$handler = 5;
              t1 = ptr;
              t1.assertConsume$2$debugId(".", "SoYourHomeworld");
              t1.assertConsume$2$debugId(".", "SoYourHomeworld");
              t1.assertConsume$2$debugId("\\", "SoYourHomeworld");
              t1.assertConsume$2$debugId("/", "SoYourHomeworld");
              t1.assertConsume$2$debugId(".", "SoYourHomeworld");
              t1.assertConsume$2$debugId(".", "SoYourHomeworld");
              t1.consumeText$0();
              t1.assertConsume$2$debugId("T", "SoYourHomeworld");
              t1.assertConsume$2$debugId(":", "SoYourHomeworld");
              title = t1.consumeText$0();
              if (title == null)
                A.throwExpression(F.ChapterFormatException$("Null title in book header", "SoYourHomeworld"));
              else
                that.title = title;
              t1.assertConsume$2$debugId("C", "SoYourHomeworld");
              t1.assertConsume$2$debugId(":", "SoYourHomeworld");
              c = t1.consumeColor$0();
              if (c != null)
                that.color = c;
              t1.assertConsume$2$debugId("B", "SoYourHomeworld");
              t1.assertConsume$2$debugId(":", "SoYourHomeworld");
              byline = t1.consumeText$0();
              if (byline != null)
                that.byline = byline;
              t1.assertConsume$2$debugId(">", "SoYourHomeworld");
              t1.assertConsume$2$debugId("-", "SoYourHomeworld");
              t1.assertConsume$2$debugId("*", "SoYourHomeworld");
              t1.assertConsume$2$debugId("/", "SoYourHomeworld");
              t1.assertConsume$2$debugId("\\", "SoYourHomeworld");
              t1.assertConsume$2$debugId("*", "SoYourHomeworld");
              t1.assertConsume$2$debugId("-", "SoYourHomeworld");
              t1.assertConsume$2$debugId("<", "SoYourHomeworld");
              C.JSString_methods.substring$2(that.byline, 0, 5);
              $async$goto = 8;
              return A._asyncAwait(B.parseBookIndex(that), $async$loadBookLoader);
            case 8:
              // returning from await.
              t1 = that.title.length !== 0 && that.chapters.length !== 0;
              t2 = that.title;
              t3 = that.chapters;
              if (t1) {
                t1 = new A.Book("SoYourHomeworld", t2, t3);
                that.book = t1;
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              } else {
                A.ErrorList_logError(new F.ChapterFormatException("Malformed book id=SoYourHomeworld title=" + t2 + " chp.length=" + t3.length, "Book_SoYourHomeworld"), null);
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$handler = 2;
              // goto after finally
              $async$goto = 7;
              break;
            case 5:
              // catch
              $async$handler = 4;
              $async$exception0 = $async$errorStack.pop();
              exception = A.unwrapException($async$exception0);
              trace = A.getTraceFromException($async$exception0);
              A.S(exception);
              A.ErrorList_logError(exception, trace);
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 7;
              break;
            case 4:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 7:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$loadBookLoader, $async$completer);
    },
    parseBookIndex(that) {
      return B.parseBookIndex$body(that);
    },
    parseBookIndex$body(that) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        parser, t1, t2, chapter, ptr, $async$temp1, $async$temp2, $async$temp3;
      var $async$parseBookIndex = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = E;
              $async$temp2 = C.NativeByteData_methods;
              $async$temp3 = J;
              $async$goto = 2;
              return A._asyncAwait(B.getFileFromServer("book_binary/SoYourHomeworld/index"), $async$parseBookIndex);
            case 2:
              // returning from await.
              ptr = $async$temp1.BufferPtr$($async$temp2.get$buffer($async$temp3.asByteData$0$x($async$result)), null, 0);
              $async$goto = 3;
              return A._asyncAwait(A.loadDeferredLibrary("chapter_parser_lib", ""), $async$parseBookIndex);
            case 3:
              // returning from await.
              A.checkDeferredIsLoaded("chapter_parser_lib");
              parser = G.ChapterParser$("bookSoYourHomeworld", ptr);
              ptr.assertConsume$2$debugId("+", "SoYourHomeworld");
              t1 = that.chapters;
            case 4:
              // while condition
              if (ptr.length > 0) {
                t2 = ptr.__BufferPtr_region_A;
                t2 === $ && A.throwUnnamedLateFieldNI();
                t2 = A.Primitives_stringFromCharCode(t2.getUint8(0)) === "(";
              } else
                t2 = false;
              if (!t2) {
                // goto after while
                $async$goto = 5;
                break;
              }
              $async$goto = 6;
              return A._asyncAwait(parser.parseBookHeader$1(t1.length), $async$parseBookIndex);
            case 6:
              // returning from await.
              chapter = $async$result;
              if (chapter != null)
                t1.push(new B.ChapterHolder(chapter));
              // goto while condition
              $async$goto = 4;
              break;
            case 5:
              // after while
              ptr.assertConsume$2$debugId(";", "SoYourHomeworld");
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$parseBookIndex, $async$completer);
    },
    getFileFromServer(path) {
      return B.getFileFromServer$body(path);
    },
    getFileFromServer$body(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.ByteBuffer),
        $async$returnValue, response, uri, t1, $async$temp1;
      var $async$getFileFromServer = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              uri = A.Uri_parse("https://homeworld.nfshost.com//" + path);
              t1 = D.zoneClient();
              t1 = new D.BrowserClient(new init.G.AbortController());
              $async$goto = 3;
              return A._asyncAwait(t1.send$1(D.Request$("GET", uri)), $async$getFileFromServer);
            case 3:
              // returning from await.
              response = $async$result;
              if (response.contentLength === 0)
                throw A.wrapException(A.Exception_Exception("No file data sent. File=" + path));
              t1 = response.statusCode;
              $async$goto = t1 === 200 ? 4 : 6;
              break;
            case 4:
              // then
              $async$temp1 = C.NativeUint8List_methods;
              $async$goto = 7;
              return A._asyncAwait(response.stream.toBytes$0(), $async$getFileFromServer);
            case 7:
              // returning from await.
              $async$returnValue = $async$temp1.get$buffer($async$result);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 5;
              break;
            case 6:
              // else
              throw A.wrapException(A.Exception_Exception("Error getting file from server: code " + t1 + " " + response.reasonPhrase));
            case 5:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getFileFromServer, $async$completer);
    }
  };
  J = holdersList[1];
  A = holdersList[0];
  C = holdersList[2];
  F = holdersList[45];
  G = holdersList[37];
  D = holdersList[43];
  E = holdersList[26];
  B = hunkHelpers.updateHolder(holdersList[3], B);
  B.ChapterHolder.prototype = {
    get$varName() {
      return this.info.varName;
    },
    get$displayName() {
      return this.info.displayName;
    },
    getOrLoadChapter$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Chapter),
        $async$returnValue, $async$self = this, data, ptr, t1, $async$temp1;
      var $async$getOrLoadChapter$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.chapter;
              $async$goto = t1 == null ? 3 : 4;
              break;
            case 3:
              // then
              t1 = $async$self.info;
              $async$temp1 = J;
              $async$goto = 5;
              return A._asyncAwait(B.getFileFromServer("book_binary/" + t1.filename), $async$getOrLoadChapter$0);
            case 5:
              // returning from await.
              data = $async$temp1.asByteData$0$x($async$result);
              $async$goto = 6;
              return A._asyncAwait(A.loadDeferredLibrary("buffer_lib", ""), $async$getOrLoadChapter$0);
            case 6:
              // returning from await.
              A.checkDeferredIsLoaded("buffer_lib");
              ptr = E.BufferPtr$(C.NativeByteData_methods.get$buffer(data), null, 0);
              $async$goto = 7;
              return A._asyncAwait(A.loadDeferredLibrary("parser_lib", ""), $async$getOrLoadChapter$0);
            case 7:
              // returning from await.
              A.checkDeferredIsLoaded("parser_lib");
              $async$goto = 8;
              return A._asyncAwait(G.ChapterParser$(t1.varName, ptr).parseWithExistingChapterInfo$2$handleErrors(t1, true), $async$getOrLoadChapter$0);
            case 8:
              // returning from await.
              t1 = $async$self.chapter = $async$result;
            case 4:
              // join
              t1.toString;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getOrLoadChapter$0, $async$completer);
    }
  };
  var typesOffset = hunkHelpers.updateTypes([]);
  (function inheritance() {
    var _inherit = hunkHelpers.inherit;
    _inherit(B.ChapterHolder, A.Object);
  })();
  var type$ = {
    ByteBuffer: A.findType("ByteBuffer"),
    Chapter: A.findType("Chapter"),
    nullable_Book: A.findType("Book?"),
    void: A.findType("~")
  };
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_77", e: "endPart", h: h});
})($__dart_deferred_initializers__, "qF/50SjsWCJHV2diNZEzPAT/4vI=");
;