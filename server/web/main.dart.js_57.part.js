// Generated by dart2js (, trust primitives, omit checks, lax runtime type, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.8.0.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_57", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, A, B, F,
  C = {FontStyle: function FontStyle(t0, t1) {
      this.index = t0;
      this._name = t1;
    }, CupertinoRadio: function CupertinoRadio(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.value = t0;
      _.groupValue = t1;
      _.onChanged = t2;
      _.mouseCursor = t3;
      _.toggleable = t4;
      _.useCheckmarkStyle = t5;
      _.activeColor = t6;
      _.focusColor = t7;
      _.focusNode = t8;
      _.autofocus = t9;
      _.key = t10;
      _.$ti = t11;
    }, _CupertinoRadioState: function _CupertinoRadioState(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16) {
      var _ = this;
      _._radio0$_painter = t0;
      _.focused = false;
      _.ToggleableStateMixin___ToggleableStateMixin__positionController_A = t1;
      _.ToggleableStateMixin___ToggleableStateMixin__position_A = t2;
      _.ToggleableStateMixin___ToggleableStateMixin__reactionController_A = t3;
      _.ToggleableStateMixin___ToggleableStateMixin__reaction_A = t4;
      _.ToggleableStateMixin___ToggleableStateMixin__reactionHoverFade_A = t5;
      _.ToggleableStateMixin___ToggleableStateMixin__reactionHoverFadeController_A = t6;
      _.ToggleableStateMixin___ToggleableStateMixin__reactionFocusFade_A = t7;
      _.ToggleableStateMixin___ToggleableStateMixin__reactionFocusFadeController_A = t8;
      _.ToggleableStateMixin__reactionAnimationDuration = t9;
      _.ToggleableStateMixin___ToggleableStateMixin__actionMap_FI = t10;
      _.ToggleableStateMixin__downPosition = t11;
      _.ToggleableStateMixin__focused = t12;
      _.ToggleableStateMixin__hovering = t13;
      _.TickerProviderStateMixin__tickers = t14;
      _.TickerProviderStateMixin__tickerModeNotifier = t15;
      _._framework$_element = _._widget = null;
      _.$ti = t16;
    }, _CupertinoRadioState__defaultOuterColor_closure: function _CupertinoRadioState__defaultOuterColor_closure(t0) {
      this.$this = t0;
    }, _CupertinoRadioState__defaultInnerColor_closure: function _CupertinoRadioState__defaultInnerColor_closure(t0) {
      this.$this = t0;
    }, _CupertinoRadioState__defaultBorderColor_closure: function _CupertinoRadioState__defaultBorderColor_closure(t0) {
      this.$this = t0;
    }, _CupertinoRadioState_build_closure: function _CupertinoRadioState_build_closure(t0) {
      this.$this = t0;
    }, _RadioPainter0: function _RadioPainter0(t0) {
      var _ = this;
      _._fillColor = _._radio0$_value = null;
      _._checkmarkStyle = false;
      _._isActive = _._isHovered = _._isFocused = _._downPosition = _._splashRadius = _._toggleable$_focusColor = _._toggleable$_hoverColor = _._reactionColor = _._inactiveReactionColor = _._inactiveColor = _._activeColor = _._reactionHoverFade = _._reactionFocusFade = _._reaction = _._toggleable$_position = _._borderColor = _._brightness = null;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t0;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    }, __CupertinoRadioState_State_TickerProviderStateMixin: function __CupertinoRadioState_State_TickerProviderStateMixin() {
    }, __CupertinoRadioState_State_TickerProviderStateMixin_ToggleableStateMixin: function __CupertinoRadioState_State_TickerProviderStateMixin_ToggleableStateMixin() {
    }, _RadioType: function _RadioType(t0, t1) {
      this.index = t0;
      this._name = t1;
    }, Radio: function Radio(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15) {
      var _ = this;
      _.value = t0;
      _.groupValue = t1;
      _.onChanged = t2;
      _.mouseCursor = t3;
      _.toggleable = t4;
      _.activeColor = t5;
      _.fillColor = t6;
      _.materialTapTargetSize = t7;
      _.hoverColor = t8;
      _.overlayColor = t9;
      _.splashRadius = t10;
      _.autofocus = t11;
      _.useCupertinoCheckmarkStyle = t12;
      _._radioType = t13;
      _.key = t14;
      _.$ti = t15;
    }, _RadioState: function _RadioState(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16) {
      var _ = this;
      _._radio$_painter = t0;
      _.ToggleableStateMixin___ToggleableStateMixin__positionController_A = t1;
      _.ToggleableStateMixin___ToggleableStateMixin__position_A = t2;
      _.ToggleableStateMixin___ToggleableStateMixin__reactionController_A = t3;
      _.ToggleableStateMixin___ToggleableStateMixin__reaction_A = t4;
      _.ToggleableStateMixin___ToggleableStateMixin__reactionHoverFade_A = t5;
      _.ToggleableStateMixin___ToggleableStateMixin__reactionHoverFadeController_A = t6;
      _.ToggleableStateMixin___ToggleableStateMixin__reactionFocusFade_A = t7;
      _.ToggleableStateMixin___ToggleableStateMixin__reactionFocusFadeController_A = t8;
      _.ToggleableStateMixin__reactionAnimationDuration = t9;
      _.ToggleableStateMixin___ToggleableStateMixin__actionMap_FI = t10;
      _.ToggleableStateMixin__downPosition = t11;
      _.ToggleableStateMixin__focused = t12;
      _.ToggleableStateMixin__hovering = t13;
      _.TickerProviderStateMixin__tickers = t14;
      _.TickerProviderStateMixin__tickerModeNotifier = t15;
      _._framework$_element = _._widget = null;
      _.$ti = t16;
    }, _RadioState__widgetFillColor_closure: function _RadioState__widgetFillColor_closure(t0) {
      this.$this = t0;
    }, _RadioState_build_closure: function _RadioState_build_closure(t0, t1) {
      this.$this = t0;
      this.radioTheme = t1;
    }, _RadioPainter: function _RadioPainter(t0) {
      var _ = this;
      _._isActive = _._isHovered = _._isFocused = _._downPosition = _._splashRadius = _._toggleable$_focusColor = _._toggleable$_hoverColor = _._reactionColor = _._inactiveReactionColor = _._inactiveColor = _._activeColor = _._reactionHoverFade = _._reactionFocusFade = _._reaction = _._toggleable$_position = null;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t0;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    }, _RadioDefaultsM3: function _RadioDefaultsM3(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.context = t0;
      _.___RadioDefaultsM3__colors_FI = _.___RadioDefaultsM3__theme_FI = $;
      _.mouseCursor = t1;
      _.fillColor = t2;
      _.overlayColor = t3;
      _.splashRadius = t4;
      _.materialTapTargetSize = t5;
      _.visualDensity = t6;
    }, _RadioDefaultsM3_fillColor_closure: function _RadioDefaultsM3_fillColor_closure(t0) {
      this.$this = t0;
    }, _RadioDefaultsM3_overlayColor_closure: function _RadioDefaultsM3_overlayColor_closure(t0) {
      this.$this = t0;
    }, __RadioState_State_TickerProviderStateMixin: function __RadioState_State_TickerProviderStateMixin() {
    }, __RadioState_State_TickerProviderStateMixin_ToggleableStateMixin: function __RadioState_State_TickerProviderStateMixin_ToggleableStateMixin() {
    },
    RadioListTile$(activeColor, groupValue, onChanged, selected, selectedTileColor, subtitle, tileColor, title, toggleable, value, $T) {
      return new C.RadioListTile(value, groupValue, onChanged, true, activeColor, title, subtitle, selected, tileColor, selectedTileColor, null, $T._eval$1("RadioListTile<0>"));
    },
    _RadioType0: function _RadioType0(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    RadioListTile: function RadioListTile(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.value = t0;
      _.groupValue = t1;
      _.onChanged = t2;
      _.toggleable = t3;
      _.activeColor = t4;
      _.title = t5;
      _.subtitle = t6;
      _.selected = t7;
      _.tileColor = t8;
      _.selectedTileColor = t9;
      _.key = t10;
      _.$ti = t11;
    },
    RadioListTile_build_closure: function RadioListTile_build_closure(t0) {
      this.$this = t0;
    },
    RadioTheme_of(context) {
      var t1;
      context.dependOnInheritedWidgetOfExactType$1$0(type$.RadioTheme);
      t1 = A.Theme_of(context);
      return t1.radioTheme;
    }
  },
  D, E;
  J = holdersList[1];
  A = holdersList[0];
  B = holdersList[2];
  F = holdersList[47];
  C = hunkHelpers.updateHolder(holdersList[27], C);
  D = holdersList[56];
  E = holdersList[94];
  C.FontStyle.prototype = {
    _enumToString$0() {
      return "FontStyle." + this._name;
    }
  };
  C.CupertinoRadio.prototype = {
    createState$0() {
      return new C._CupertinoRadioState(new C._RadioPainter0($.$get$ChangeNotifier__emptyListeners()), $, $, $, $, $, $, $, $, B.Duration_100000, $, null, false, false, null, null, this.$ti._eval$1("_CupertinoRadioState<1>"));
    }
  };
  C._CupertinoRadioState.prototype = {
    _radio0$_handleChanged$1(selected) {
      var t1;
      if (selected == null) {
        this._widget.onChanged.call$1(null);
        return;
      }
      if (selected) {
        t1 = this._widget;
        t1.onChanged.call$1(t1.value);
      }
    },
    dispose$0() {
      this._radio0$_painter.dispose$0();
      this.super$__CupertinoRadioState_State_TickerProviderStateMixin_ToggleableStateMixin$dispose();
    },
    get$onChanged() {
      this._widget.toString;
      return this.get$_radio0$_handleChanged();
    },
    get$tristate() {
      this._widget.toString;
      return true;
    },
    get$value() {
      var t1 = this._widget;
      return t1.value === t1.groupValue;
    },
    onFocusChange$1(value) {
      if (this.focused !== value)
        this.focused = value;
    },
    get$_defaultOuterColor() {
      return new A._WidgetStatePropertyWith(new C._CupertinoRadioState__defaultOuterColor_closure(this), type$._WidgetStatePropertyWith_Color);
    },
    get$_defaultInnerColor() {
      return new A._WidgetStatePropertyWith(new C._CupertinoRadioState__defaultInnerColor_closure(this), type$._WidgetStatePropertyWith_Color);
    },
    get$_defaultBorderColor() {
      return new A._WidgetStatePropertyWith(new C._CupertinoRadioState__defaultBorderColor_closure(this), type$._WidgetStatePropertyWith_Color);
    },
    build$1(context) {
      var inactiveStates, currentStates, effectiveActiveColor, effectiveInactiveColor, t1, effectiveFocusOverlayColor, effectiveFillColor, effectiveBorderColor, accessibilitySelected, t2, t3, t4, t5, _this = this, _null = null,
        activeStates = _this.get$states();
      activeStates.add$1(0, B.WidgetState_4);
      inactiveStates = _this.get$states();
      inactiveStates.remove$1(0, B.WidgetState_4);
      currentStates = _this.get$states();
      effectiveActiveColor = _this.get$_defaultOuterColor()._widget_state$_resolve.call$1(activeStates);
      effectiveInactiveColor = _this.get$_defaultOuterColor()._widget_state$_resolve.call$1(inactiveStates);
      _this._widget.toString;
      t1 = A.HSLColor_HSLColor$fromColor(effectiveActiveColor.withOpacity$1(0.8));
      effectiveFocusOverlayColor = new A.HSLColor(t1.alpha, t1.hue, 0.835, 0.69).toColor$0();
      effectiveFillColor = _this.get$_defaultInnerColor()._widget_state$_resolve.call$1(currentStates);
      effectiveBorderColor = _this.get$_defaultBorderColor()._widget_state$_resolve.call$1(currentStates);
      accessibilitySelected = _null;
      switch (A.defaultTargetPlatform().index) {
        case 0:
        case 1:
        case 3:
        case 5:
          break;
        case 2:
        case 4:
          t1 = _this._widget;
          accessibilitySelected = t1.value === t1.groupValue;
          break;
      }
      t1 = _this._widget;
      t2 = t1.value;
      t3 = t1.groupValue;
      t1 = t1.focusNode;
      t4 = _this._radio0$_painter;
      t5 = _this.ToggleableStateMixin___ToggleableStateMixin__position_A;
      t5 === $ && A.throwUnnamedLateFieldNI();
      t4.set$position(t5);
      t5 = _this.ToggleableStateMixin___ToggleableStateMixin__reaction_A;
      t5 === $ && A.throwUnnamedLateFieldNI();
      t4.set$reaction(t5);
      t4.set$focusColor(effectiveFocusOverlayColor);
      t4.set$downPosition(_this.ToggleableStateMixin__downPosition);
      t4.set$isFocused(_this.focused);
      t4.set$activeColor(effectiveActiveColor);
      t4.set$inactiveColor(effectiveInactiveColor);
      t4.set$fillColor(effectiveFillColor);
      t5 = _this._widget;
      t4.set$value(t5.value === t5.groupValue);
      _this._widget.toString;
      t4.set$checkmarkStyle(false);
      _this._widget.toString;
      t4.set$isActive(true);
      t4.set$borderColor(effectiveBorderColor);
      t4.set$brightness(A.CupertinoTheme_of(context).get$brightness());
      t4 = _this.buildToggleable$6$autofocus$focusNode$mouseCursor$onFocusChange$painter$size(false, t1, new A._WidgetStatePropertyWith(new C._CupertinoRadioState_build_closure(_this), type$._WidgetStatePropertyWith_MouseCursor), _this.get$onFocusChange(), t4, D.Size_18_18);
      return new A.Semantics(A.SemanticsProperties$(_null, _null, _null, _null, _null, _null, t2 === t3, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, accessibilitySelected, _null, _null, _null, _null, _null, _null, _null, B.SemanticsValidationResult_0, _null), false, false, false, false, t4, _null);
    }
  };
  C._RadioPainter0.prototype = {
    set$value(value) {
      if (this._radio0$_value === value)
        return;
      this._radio0$_value = value;
      this.notifyListeners$0();
    },
    set$fillColor(value) {
      if (value.$eq(0, this._fillColor))
        return;
      this._fillColor = value;
      this.notifyListeners$0();
    },
    set$checkmarkStyle(value) {
      return;
    },
    set$brightness(value) {
      if (this._brightness == value)
        return;
      this._brightness = value;
      this.notifyListeners$0();
    },
    set$borderColor(value) {
      if (J.$eq$(this._borderColor, value))
        return;
      this._borderColor = value;
      this.notifyListeners$0();
    },
    _drawPressedOverlay$3(canvas, center, radius) {
      var pressedPaint;
      $.$get$_renderer();
      pressedPaint = A.CkPaint$();
      pressedPaint._colorValue = (this._brightness === B.Brightness_1 ? A.Color$fromARGB(38, B.Color_vnR.toARGB32$0() >>> 16 & 255, B.Color_vnR.toARGB32$0() >>> 8 & 255, B.Color_vnR.toARGB32$0() & 255) : A.Color$fromARGB(38, B.Color_wst.toARGB32$0() >>> 16 & 255, B.Color_wst.toARGB32$0() >>> 8 & 255, B.Color_wst.toARGB32$0() & 255)).get$value();
      canvas.__engine$_canvas.drawCircle$3(center, radius, pressedPaint);
    },
    _drawFillGradient$5(canvas, center, radius, topColor, bottomColor) {
      var gradientPaint, t2,
        t1 = A._setArrayType([topColor, bottomColor], type$.JSArray_Color),
        circleRect = A.Rect$fromCircle(center, radius);
      $.$get$_renderer();
      gradientPaint = A.CkPaint$();
      gradientPaint.set$shader(new F.LinearGradient(B.Alignment_0_m1, B.Alignment_0_1, B.TileMode_0, t1, null, null).createShader$1(circleRect));
      t1 = A.CkPath_CkPath();
      t2 = t1.__CkPath__ref_F;
      t2 === $ && A.throwUnnamedLateFieldNI();
      t2 = t2._nativeObject;
      t2.toString;
      t2.addOval(A.toSkRect(circleRect), false, 1);
      canvas.__engine$_canvas.drawPath$2(t1, gradientPaint);
    },
    _drawOuterBorder$2(canvas, center) {
      var borderPaint;
      $.$get$_renderer();
      borderPaint = A.CkPaint$();
      borderPaint.style = B.PaintingStyle_1;
      borderPaint._colorValue = this._borderColor.get$value();
      borderPaint.strokeWidth = 0.3;
      canvas.__engine$_canvas.drawCircle$3(center, 7, borderPaint);
    },
    paint$2(canvas, size) {
      var outerPaint, t2, t3, innerPaint, paint, focusPaint, _this = this,
        center = new A.Rect(0, 0, 0 + size._dx, 0 + size._dy).get$center(),
        t1 = _this._radio0$_value;
      if (t1 === true) {
        $.$get$_renderer();
        outerPaint = A.CkPaint$();
        t1 = _this._activeColor.get$value();
        outerPaint._colorValue = t1;
        if (_this._brightness === B.Brightness_0) {
          t2 = _this._isActive;
          t2.toString;
          t2 = !t2;
        } else
          t2 = false;
        if (t2) {
          t1 = A.Color$(t1);
          t2 = _this._isActive;
          t2.toString;
          t1 = A.Color$fromARGB(B.JSNumber_methods.round$0(255 * (t2 ? 0.14 : 0.08)), t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
          t3 = A.Color$(outerPaint._colorValue);
          t2 = _this._isActive;
          t2.toString;
          _this._drawFillGradient$5(canvas, center, 7, t1, A.Color$fromARGB(B.JSNumber_methods.round$0(255 * (t2 ? 0.29 : 0.14)), t3.toARGB32$0() >>> 16 & 255, t3.toARGB32$0() >>> 8 & 255, t3.toARGB32$0() & 255));
        } else
          canvas.__engine$_canvas.drawCircle$3(center, 7, outerPaint);
        if (_this._downPosition != null)
          _this._drawPressedOverlay$3(canvas, center, 7);
        innerPaint = A.CkPaint$();
        innerPaint._colorValue = _this._fillColor.get$value();
        canvas.__engine$_canvas.drawCircle$3(center, 2.975, innerPaint);
        t1 = _this._isActive;
        t1.toString;
        if (!t1)
          _this._drawOuterBorder$2(canvas, center);
      } else {
        $.$get$_renderer();
        paint = A.CkPaint$();
        t1 = _this._isActive;
        t1.toString;
        if (t1) {
          t1 = _this._inactiveColor;
          t1.toString;
        } else
          t1 = $.$get$_kDisabledOuterColor();
        t1 = t1.get$value();
        paint._colorValue = t1;
        if (_this._brightness === B.Brightness_0) {
          t1 = A.Color$(t1);
          t2 = _this._isActive;
          t2.toString;
          t1 = A.Color$fromARGB(B.JSNumber_methods.round$0(255 * (t2 ? 0.14 : 0.08)), t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
          t3 = A.Color$(paint._colorValue);
          t2 = _this._isActive;
          t2.toString;
          _this._drawFillGradient$5(canvas, center, 7, t1, A.Color$fromARGB(B.JSNumber_methods.round$0(255 * (t2 ? 0.29 : 0.14)), t3.toARGB32$0() >>> 16 & 255, t3.toARGB32$0() >>> 8 & 255, t3.toARGB32$0() & 255));
        } else
          canvas.__engine$_canvas.drawCircle$3(center, 7, paint);
        if (_this._downPosition != null)
          _this._drawPressedOverlay$3(canvas, center, 7);
        _this._drawOuterBorder$2(canvas, center);
      }
      t1 = _this._isFocused;
      t1.toString;
      if (t1) {
        $.$get$_renderer();
        focusPaint = A.CkPaint$();
        focusPaint.style = B.PaintingStyle_1;
        focusPaint._colorValue = _this._toggleable$_focusColor.get$value();
        focusPaint.strokeWidth = 3;
        canvas.__engine$_canvas.drawCircle$3(center, 8.5, focusPaint);
      }
    }
  };
  C.__CupertinoRadioState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTickers());
      _this.TickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    }
  };
  C.__CupertinoRadioState_State_TickerProviderStateMixin_ToggleableStateMixin.prototype = {
    initState$0() {
      var t1, t2, _this = this, _null = null;
      _this.super$State$initState();
      t1 = _this._widget;
      t2 = A.AnimationController$(_null, B.Duration_200000, _null, t1.value !== t1.groupValue ? 0 : 1, _this);
      _this.ToggleableStateMixin___ToggleableStateMixin__positionController_A = t2;
      _this.ToggleableStateMixin___ToggleableStateMixin__position_A = A.CurvedAnimation$(B.Cubic_Pa6, t2, B.Cubic_ts0);
      t2 = A.AnimationController$(_null, _this.ToggleableStateMixin__reactionAnimationDuration, _null, _null, _this);
      _this.ToggleableStateMixin___ToggleableStateMixin__reactionController_A = t2;
      _this.ToggleableStateMixin___ToggleableStateMixin__reaction_A = A.CurvedAnimation$(B.Cubic_Dkk, t2, _null);
      t1 = A.AnimationController$(_null, B.Duration_50000, _null, _this.ToggleableStateMixin__hovering || _this.ToggleableStateMixin__focused ? 1 : 0, _this);
      _this.ToggleableStateMixin___ToggleableStateMixin__reactionHoverFadeController_A = t1;
      _this.ToggleableStateMixin___ToggleableStateMixin__reactionHoverFade_A = A.CurvedAnimation$(B.Cubic_Dkk, t1, _null);
      t1 = A.AnimationController$(_null, B.Duration_50000, _null, _this.ToggleableStateMixin__hovering || _this.ToggleableStateMixin__focused ? 1 : 0, _this);
      _this.ToggleableStateMixin___ToggleableStateMixin__reactionFocusFadeController_A = t1;
      _this.ToggleableStateMixin___ToggleableStateMixin__reactionFocusFade_A = A.CurvedAnimation$(B.Cubic_Dkk, t1, _null);
    },
    dispose$0() {
      var _this = this,
        t1 = _this.ToggleableStateMixin___ToggleableStateMixin__positionController_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__position_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__reactionController_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__reaction_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__reactionHoverFadeController_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__reactionHoverFade_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__reactionFocusFadeController_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__reactionFocusFade_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      _this.super$__CupertinoRadioState_State_TickerProviderStateMixin$dispose();
    }
  };
  C._RadioType.prototype = {
    _enumToString$0() {
      return "_RadioType." + this._name;
    }
  };
  C.Radio.prototype = {
    createState$0() {
      return new C._RadioState(new C._RadioPainter($.$get$ChangeNotifier__emptyListeners()), $, $, $, $, $, $, $, $, B.Duration_100000, $, null, false, false, null, null, this.$ti._eval$1("_RadioState<1>"));
    }
  };
  C._RadioState.prototype = {
    _radio$_handleChanged$1(selected) {
      var t1;
      if (selected == null) {
        this._widget.onChanged.call$1(null);
        return;
      }
      if (selected) {
        t1 = this._widget;
        t1.onChanged.call$1(t1.value);
      }
    },
    didUpdateWidget$1(oldWidget) {
      var t1;
      this.super$State$didUpdateWidget(oldWidget);
      t1 = this._widget;
      if (t1.value === t1.groupValue !== (oldWidget.value === oldWidget.groupValue))
        this.animateToValue$0();
    },
    dispose$0() {
      this._radio$_painter.dispose$0();
      this.super$__RadioState_State_TickerProviderStateMixin_ToggleableStateMixin$dispose();
    },
    get$onChanged() {
      this._widget.toString;
      return this.get$_radio$_handleChanged();
    },
    get$tristate() {
      this._widget.toString;
      return true;
    },
    get$value() {
      var t1 = this._widget;
      return t1.value === t1.groupValue;
    },
    get$_widgetFillColor() {
      return new A._WidgetStatePropertyWith(new C._RadioState__widgetFillColor_closure(this), type$._WidgetStatePropertyWith_nullable_Color);
    },
    build$1(context) {
      var t1, radioTheme, defaults, effectiveMaterialTapTargetSize, effectiveVisualDensity, size, activeStates, inactiveStates, activeColor, t2, effectiveActiveColor, inactiveColor, t3, effectiveInactiveColor, focusedStates, t4, effectiveFocusOverlayColor, hoveredStates, effectiveHoverOverlayColor, effectiveActivePressedOverlayColor, effectiveInactivePressedOverlayColor, accessibilitySelected, _this = this, _null = null;
      switch (_this._widget._radioType.index) {
        case 0:
          break;
        case 1:
          switch (A.Theme_of(context).platform.index) {
            case 0:
            case 1:
            case 3:
            case 5:
              break;
            case 2:
            case 4:
              t1 = _this._widget;
              return new C.CupertinoRadio(t1.value, t1.groupValue, t1.onChanged, t1.mouseCursor, true, false, t1.activeColor, _null, _null, false, _null, _this.$ti._eval$1("CupertinoRadio<1>"));
          }
          break;
      }
      radioTheme = C.RadioTheme_of(context);
      A.Theme_of(context);
      defaults = new C._RadioDefaultsM3(context, _null, _null, _null, _null, _null, _null);
      effectiveMaterialTapTargetSize = _this._widget.materialTapTargetSize;
      effectiveVisualDensity = defaults.get$visualDensity();
      switch (effectiveMaterialTapTargetSize.index) {
        case 0:
          t1 = B.Size_48_48;
          break;
        case 1:
          t1 = B.Size_40_40;
          break;
        default:
          t1 = _null;
      }
      size = t1.$add(0, new A.Offset(effectiveVisualDensity.horizontal, effectiveVisualDensity.vertical).$mul(0, 4));
      activeStates = _this.get$states();
      activeStates.add$1(0, B.WidgetState_4);
      inactiveStates = _this.get$states();
      inactiveStates.remove$1(0, B.WidgetState_4);
      _this._widget.toString;
      activeColor = _this.get$_widgetFillColor()._widget_state$_resolve.call$1(activeStates);
      if (activeColor == null) {
        t1 = radioTheme.fillColor;
        activeColor = t1 == null ? _null : t1.resolve$1(activeStates);
      }
      t1 = activeColor == null;
      if (t1) {
        t2 = defaults.get$fillColor()._widget_state$_resolve.call$1(activeStates);
        t2.toString;
        effectiveActiveColor = t2;
      } else
        effectiveActiveColor = activeColor;
      _this._widget.toString;
      inactiveColor = _this.get$_widgetFillColor()._widget_state$_resolve.call$1(inactiveStates);
      if (inactiveColor == null) {
        t2 = radioTheme.fillColor;
        inactiveColor = t2 == null ? _null : t2.resolve$1(inactiveStates);
      }
      t2 = inactiveColor == null;
      if (t2) {
        t3 = defaults.get$fillColor()._widget_state$_resolve.call$1(inactiveStates);
        t3.toString;
        effectiveInactiveColor = t3;
      } else
        effectiveInactiveColor = inactiveColor;
      focusedStates = _this.get$states();
      focusedStates.add$1(0, B.WidgetState_1);
      _this._widget.toString;
      t3 = radioTheme.overlayColor;
      t4 = t3 == null ? _null : t3.resolve$1(focusedStates);
      effectiveFocusOverlayColor = t4;
      if (effectiveFocusOverlayColor == null) {
        t4 = defaults.get$overlayColor()._widget_state$_resolve.call$1(focusedStates);
        t4.toString;
        effectiveFocusOverlayColor = t4;
      }
      hoveredStates = _this.get$states();
      hoveredStates.add$1(0, B.WidgetState_0);
      _this._widget.toString;
      t4 = t3 == null ? _null : t3.resolve$1(hoveredStates);
      effectiveHoverOverlayColor = t4;
      if (effectiveHoverOverlayColor == null) {
        t4 = defaults.get$overlayColor()._widget_state$_resolve.call$1(hoveredStates);
        t4.toString;
        effectiveHoverOverlayColor = t4;
      }
      activeStates.add$1(0, B.WidgetState_2);
      _this._widget.toString;
      t4 = t3 == null ? _null : t3.resolve$1(activeStates);
      if (t4 == null) {
        t1 = t1 ? _null : activeColor.withAlpha$1(31);
        effectiveActivePressedOverlayColor = t1;
      } else
        effectiveActivePressedOverlayColor = t4;
      if (effectiveActivePressedOverlayColor == null) {
        t1 = defaults.get$overlayColor()._widget_state$_resolve.call$1(activeStates);
        t1.toString;
        effectiveActivePressedOverlayColor = t1;
      }
      inactiveStates.add$1(0, B.WidgetState_2);
      _this._widget.toString;
      t1 = t3 == null ? _null : t3.resolve$1(inactiveStates);
      if (t1 == null) {
        t1 = t2 ? _null : inactiveColor.withAlpha$1(31);
        effectiveInactivePressedOverlayColor = t1;
      } else
        effectiveInactivePressedOverlayColor = t1;
      if (effectiveInactivePressedOverlayColor == null) {
        t1 = defaults.get$overlayColor()._widget_state$_resolve.call$1(inactiveStates);
        t1.toString;
        effectiveInactivePressedOverlayColor = t1;
      }
      if (_this.ToggleableStateMixin__downPosition != null) {
        effectiveHoverOverlayColor = _this.get$states().contains$1(0, B.WidgetState_4) ? effectiveActivePressedOverlayColor : effectiveInactivePressedOverlayColor;
        effectiveFocusOverlayColor = _this.get$states().contains$1(0, B.WidgetState_4) ? effectiveActivePressedOverlayColor : effectiveInactivePressedOverlayColor;
      }
      accessibilitySelected = _null;
      switch (A.defaultTargetPlatform().index) {
        case 0:
        case 1:
        case 3:
        case 5:
          break;
        case 2:
        case 4:
          t1 = _this._widget;
          accessibilitySelected = t1.value === t1.groupValue;
          break;
      }
      t1 = _this._widget;
      t2 = t1.value;
      t1 = t1.groupValue;
      t3 = _this._radio$_painter;
      t4 = _this.ToggleableStateMixin___ToggleableStateMixin__position_A;
      t4 === $ && A.throwUnnamedLateFieldNI();
      t3.set$position(t4);
      t4 = _this.ToggleableStateMixin___ToggleableStateMixin__reaction_A;
      t4 === $ && A.throwUnnamedLateFieldNI();
      t3.set$reaction(t4);
      t4 = _this.ToggleableStateMixin___ToggleableStateMixin__reactionFocusFade_A;
      t4 === $ && A.throwUnnamedLateFieldNI();
      t3.set$reactionFocusFade(t4);
      t4 = _this.ToggleableStateMixin___ToggleableStateMixin__reactionHoverFade_A;
      t4 === $ && A.throwUnnamedLateFieldNI();
      t3.set$reactionHoverFade(t4);
      t3.set$inactiveReactionColor(effectiveInactivePressedOverlayColor);
      t3.set$reactionColor(effectiveActivePressedOverlayColor);
      t3.set$hoverColor(effectiveHoverOverlayColor);
      t3.set$focusColor(effectiveFocusOverlayColor);
      _this._widget.toString;
      t4 = radioTheme.splashRadius;
      t3.set$splashRadius(t4 == null ? 20 : t4);
      t3.set$downPosition(_this.ToggleableStateMixin__downPosition);
      t3.set$isFocused(_this.get$states().contains$1(0, B.WidgetState_1));
      t3.set$isHovered(_this.get$states().contains$1(0, B.WidgetState_0));
      t3.set$activeColor(effectiveActiveColor);
      t3.set$inactiveColor(effectiveInactiveColor);
      t3 = _this.buildToggleable$5$autofocus$focusNode$mouseCursor$painter$size(false, _null, new A._WidgetStatePropertyWith(new C._RadioState_build_closure(_this, radioTheme), type$._WidgetStatePropertyWith_MouseCursor), t3, size);
      return new A.Semantics(A.SemanticsProperties$(_null, _null, _null, _null, _null, _null, t2 === t1, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, accessibilitySelected, _null, _null, _null, _null, _null, _null, _null, B.SemanticsValidationResult_0, _null), false, false, false, false, t3, _null);
    }
  };
  C._RadioPainter.prototype = {
    paint$2(canvas, size) {
      var center, paint, t1, t2, _this = this;
      _this.paintRadialReaction$2$canvas$origin(canvas, size.center$1(B.Offset_0_0));
      center = new A.Rect(0, 0, 0 + size._dx, 0 + size._dy).get$center();
      $.$get$_renderer();
      paint = A.CkPaint$();
      t1 = _this._inactiveColor;
      t1.toString;
      t2 = _this._activeColor;
      t2.toString;
      paint._colorValue = A.Color_lerp(t1, t2, _this._toggleable$_position.get$value()).get$value();
      paint.style = B.PaintingStyle_1;
      paint.strokeWidth = 2;
      t2 = canvas.__engine$_canvas;
      t2.drawCircle$3(center, 8, paint);
      if (_this._toggleable$_position.get$status() !== B.AnimationStatus_0) {
        paint.style = B.PaintingStyle_0;
        t2.drawCircle$3(center, 4.5 * _this._toggleable$_position.get$value(), paint);
      }
    }
  };
  C._RadioDefaultsM3.prototype = {
    get$_radio$_theme() {
      var result, _this = this,
        value = _this.___RadioDefaultsM3__theme_FI;
      if (value === $) {
        result = A.Theme_of(_this.context);
        _this.___RadioDefaultsM3__theme_FI !== $ && A.throwUnnamedLateFieldADI();
        _this.___RadioDefaultsM3__theme_FI = result;
        value = result;
      }
      return value;
    },
    get$_radio$_colors() {
      var t1, _this = this,
        value = _this.___RadioDefaultsM3__colors_FI;
      if (value === $) {
        t1 = _this.get$_radio$_theme();
        _this.___RadioDefaultsM3__colors_FI !== $ && A.throwUnnamedLateFieldADI();
        value = _this.___RadioDefaultsM3__colors_FI = t1.colorScheme;
      }
      return value;
    },
    get$fillColor() {
      return new A._WidgetStatePropertyWith(new C._RadioDefaultsM3_fillColor_closure(this), type$._WidgetStatePropertyWith_Color);
    },
    get$overlayColor() {
      return new A._WidgetStatePropertyWith(new C._RadioDefaultsM3_overlayColor_closure(this), type$._WidgetStatePropertyWith_Color);
    },
    get$materialTapTargetSize() {
      return this.get$_radio$_theme().materialTapTargetSize;
    },
    get$visualDensity() {
      return this.get$_radio$_theme().visualDensity;
    }
  };
  C.__RadioState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTickers());
      _this.TickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    }
  };
  C.__RadioState_State_TickerProviderStateMixin_ToggleableStateMixin.prototype = {
    initState$0() {
      var t1, t2, _this = this, _null = null;
      _this.super$State$initState();
      t1 = _this._widget;
      t2 = A.AnimationController$(_null, B.Duration_200000, _null, t1.value !== t1.groupValue ? 0 : 1, _this);
      _this.ToggleableStateMixin___ToggleableStateMixin__positionController_A = t2;
      _this.ToggleableStateMixin___ToggleableStateMixin__position_A = A.CurvedAnimation$(B.Cubic_Pa6, t2, B.Cubic_ts0);
      t2 = A.AnimationController$(_null, _this.ToggleableStateMixin__reactionAnimationDuration, _null, _null, _this);
      _this.ToggleableStateMixin___ToggleableStateMixin__reactionController_A = t2;
      _this.ToggleableStateMixin___ToggleableStateMixin__reaction_A = A.CurvedAnimation$(B.Cubic_Dkk, t2, _null);
      t1 = A.AnimationController$(_null, B.Duration_50000, _null, _this.ToggleableStateMixin__hovering || _this.ToggleableStateMixin__focused ? 1 : 0, _this);
      _this.ToggleableStateMixin___ToggleableStateMixin__reactionHoverFadeController_A = t1;
      _this.ToggleableStateMixin___ToggleableStateMixin__reactionHoverFade_A = A.CurvedAnimation$(B.Cubic_Dkk, t1, _null);
      t1 = A.AnimationController$(_null, B.Duration_50000, _null, _this.ToggleableStateMixin__hovering || _this.ToggleableStateMixin__focused ? 1 : 0, _this);
      _this.ToggleableStateMixin___ToggleableStateMixin__reactionFocusFadeController_A = t1;
      _this.ToggleableStateMixin___ToggleableStateMixin__reactionFocusFade_A = A.CurvedAnimation$(B.Cubic_Dkk, t1, _null);
    },
    dispose$0() {
      var _this = this,
        t1 = _this.ToggleableStateMixin___ToggleableStateMixin__positionController_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__position_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__reactionController_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__reaction_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__reactionHoverFadeController_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__reactionHoverFade_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__reactionFocusFadeController_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      t1 = _this.ToggleableStateMixin___ToggleableStateMixin__reactionFocusFade_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.dispose$0();
      _this.super$__RadioState_State_TickerProviderStateMixin$dispose();
    }
  };
  C._RadioType0.prototype = {
    _enumToString$0() {
      return "_RadioType." + this._name;
    }
  };
  C.RadioListTile.prototype = {
    build$1(context) {
      var control, t1, leading, trailing, effectiveActiveColor, _this = this, _null = null;
      switch (0) {
        case 0:
          control = new A.ExcludeFocus(new C.Radio(_this.value, _this.groupValue, _this.onChanged, _null, true, _this.activeColor, _null, B.MaterialTapTargetSize_1, _null, _null, _null, false, false, D._RadioType_0, _null, _this.$ti._eval$1("Radio<1>")), _null);
          break;
      }
      A.ListTileTheme_of(context);
      $label0$1: {
        t1 = new A._Record_2(control, _null);
        break $label0$1;
      }
      leading = t1._0;
      trailing = t1._1;
      A.Theme_of(context);
      C.RadioTheme_of(context);
      t1 = _this.selected;
      if (t1)
        A.LinkedHashSet_LinkedHashSet$_empty(type$.WidgetState).add$1(0, B.WidgetState_4);
      effectiveActiveColor = _this.activeColor;
      return new A.MergeSemantics(A.ListTile$(false, _null, _null, _null, true, _null, _null, false, false, leading, _null, _null, new C.RadioListTile_build_closure(_this), t1, effectiveActiveColor, _this.selectedTileColor, _null, _this.subtitle, _this.tileColor, _this.title, trailing, _null), _null);
    }
  };
  var typesOffset = hunkHelpers.updateTypes(["~(bool?)", "~(bool)"]);
  C._CupertinoRadioState__defaultOuterColor_closure.prototype = {
    call$1(states) {
      var t1;
      if (states.contains$1(0, B.WidgetState_6)) {
        t1 = $.$get$_kDisabledOuterColor();
        this.$this._framework$_element.toString;
        return t1;
      }
      if (states.contains$1(0, B.WidgetState_4)) {
        t1 = this.$this._widget.activeColor;
        return t1;
      }
      this.$this._widget.toString;
      return B.Color_wst;
    },
    $signature: 5
  };
  C._CupertinoRadioState__defaultInnerColor_closure.prototype = {
    call$1(states) {
      var t1;
      if (states.contains$1(0, B.WidgetState_6) && states.contains$1(0, B.WidgetState_4)) {
        t1 = this.$this;
        t1._widget.toString;
        t1 = t1._framework$_element;
        t1.toString;
        t1 = D.CupertinoDynamicColor_14C.resolveFrom$1(t1);
        return t1;
      }
      if (states.contains$1(0, B.WidgetState_4)) {
        t1 = this.$this;
        t1._widget.toString;
        t1 = t1._framework$_element;
        t1.toString;
        t1 = D.CupertinoDynamicColor_eMV.resolveFrom$1(t1);
        return t1;
      }
      return B.Color_wst;
    },
    $signature: 5
  };
  C._CupertinoRadioState__defaultBorderColor_closure.prototype = {
    call$1(states) {
      var t1;
      if ((states.contains$1(0, B.WidgetState_4) || states.contains$1(0, B.WidgetState_1)) && !states.contains$1(0, B.WidgetState_6))
        return B.Color_Edl;
      if (states.contains$1(0, B.WidgetState_6)) {
        t1 = this.$this._framework$_element;
        t1.toString;
        t1 = D.CupertinoDynamicColor_G0s.resolveFrom$1(t1);
        return t1;
      }
      t1 = this.$this._framework$_element;
      t1.toString;
      t1 = D.CupertinoDynamicColor_Zrq.resolveFrom$1(t1);
      return t1;
    },
    $signature: 5
  };
  C._CupertinoRadioState_build_closure.prototype = {
    call$1(states) {
      var t1 = A.WidgetStateProperty_resolveAs(this.$this._widget.mouseCursor, states, type$.nullable_MouseCursor);
      if (t1 == null)
        t1 = states.contains$1(0, B.WidgetState_6) ? B.SystemMouseCursor_basic : B.SystemMouseCursor_click;
      return t1;
    },
    $signature: 42
  };
  C._RadioState__widgetFillColor_closure.prototype = {
    call$1(states) {
      if (states.contains$1(0, B.WidgetState_6))
        return null;
      if (states.contains$1(0, B.WidgetState_4))
        return this.$this._widget.activeColor;
      return null;
    },
    $signature: 32
  };
  C._RadioState_build_closure.prototype = {
    call$1(states) {
      var t1 = A.WidgetStateProperty_resolveAs(this.$this._widget.mouseCursor, states, type$.nullable_MouseCursor);
      if (t1 == null)
        t1 = null;
      return t1 == null ? A.WidgetStateProperty_resolveAs(B._WidgetStateMouseCursor_nmO, states, type$.MouseCursor) : t1;
    },
    $signature: 42
  };
  C._RadioDefaultsM3_fillColor_closure.prototype = {
    call$1(states) {
      var t1, t2, _this = this;
      if (states.contains$1(0, B.WidgetState_4)) {
        if (states.contains$1(0, B.WidgetState_6)) {
          t1 = _this.$this.get$_radio$_colors().onSurface;
          return A.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
        }
        if (states.contains$1(0, B.WidgetState_2))
          return _this.$this.get$_radio$_colors().primary;
        if (states.contains$1(0, B.WidgetState_0))
          return _this.$this.get$_radio$_colors().primary;
        if (states.contains$1(0, B.WidgetState_1))
          return _this.$this.get$_radio$_colors().primary;
        return _this.$this.get$_radio$_colors().primary;
      }
      if (states.contains$1(0, B.WidgetState_6)) {
        t1 = _this.$this.get$_radio$_colors().onSurface;
        return A.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
      }
      if (states.contains$1(0, B.WidgetState_2))
        return _this.$this.get$_radio$_colors().onSurface;
      if (states.contains$1(0, B.WidgetState_0))
        return _this.$this.get$_radio$_colors().onSurface;
      if (states.contains$1(0, B.WidgetState_1))
        return _this.$this.get$_radio$_colors().onSurface;
      t1 = _this.$this.get$_radio$_colors();
      t2 = t1._onSurfaceVariant;
      return t2 == null ? t1.onSurface : t2;
    },
    $signature: 5
  };
  C._RadioDefaultsM3_overlayColor_closure.prototype = {
    call$1(states) {
      var t1, _this = this;
      if (states.contains$1(0, B.WidgetState_4)) {
        if (states.contains$1(0, B.WidgetState_2)) {
          t1 = _this.$this.get$_radio$_colors().onSurface;
          return A.Color$fromARGB(B.JSNumber_methods.round$0(25.5), t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
        }
        if (states.contains$1(0, B.WidgetState_0))
          return _this.$this.get$_radio$_colors().primary.withOpacity$1(0.08);
        if (states.contains$1(0, B.WidgetState_1))
          return _this.$this.get$_radio$_colors().primary.withOpacity$1(0.1);
        return B.Color_Edl;
      }
      if (states.contains$1(0, B.WidgetState_2))
        return _this.$this.get$_radio$_colors().primary.withOpacity$1(0.1);
      if (states.contains$1(0, B.WidgetState_0)) {
        t1 = _this.$this.get$_radio$_colors().onSurface;
        return A.Color$fromARGB(20, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
      }
      if (states.contains$1(0, B.WidgetState_1)) {
        t1 = _this.$this.get$_radio$_colors().onSurface;
        return A.Color$fromARGB(B.JSNumber_methods.round$0(25.5), t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
      }
      return B.Color_Edl;
    },
    $signature: 5
  };
  C.RadioListTile_build_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.value;
      if (t2 === t1.groupValue) {
        t1.onChanged.call$1(null);
        return;
      }
      t1.onChanged.call$1(t2);
    },
    $signature: 0
  };
  (function aliases() {
    var _ = C.__CupertinoRadioState_State_TickerProviderStateMixin.prototype;
    _.super$__CupertinoRadioState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = C.__CupertinoRadioState_State_TickerProviderStateMixin_ToggleableStateMixin.prototype;
    _.super$__CupertinoRadioState_State_TickerProviderStateMixin_ToggleableStateMixin$dispose = _.dispose$0;
    _ = C.__RadioState_State_TickerProviderStateMixin.prototype;
    _.super$__RadioState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = C.__RadioState_State_TickerProviderStateMixin_ToggleableStateMixin.prototype;
    _.super$__RadioState_State_TickerProviderStateMixin_ToggleableStateMixin$dispose = _.dispose$0;
  })();
  (function installTearOffs() {
    var _instance_1_u = hunkHelpers._instance_1u;
    var _;
    _instance_1_u(_ = C._CupertinoRadioState.prototype, "get$_radio0$_handleChanged", "_radio0$_handleChanged$1", 0);
    _instance_1_u(_, "get$onFocusChange", "onFocusChange$1", 1);
    _instance_1_u(C._RadioState.prototype, "get$_radio$_handleChanged", "_radio$_handleChanged$1", 0);
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(A._Enum, [C.FontStyle, C._RadioType, C._RadioType0]);
    _inheritMany(A.StatefulWidget, [C.CupertinoRadio, C.Radio]);
    _inheritMany(A.State, [C.__CupertinoRadioState_State_TickerProviderStateMixin, C.__RadioState_State_TickerProviderStateMixin]);
    _inherit(C.__CupertinoRadioState_State_TickerProviderStateMixin_ToggleableStateMixin, C.__CupertinoRadioState_State_TickerProviderStateMixin);
    _inherit(C._CupertinoRadioState, C.__CupertinoRadioState_State_TickerProviderStateMixin_ToggleableStateMixin);
    _inheritMany(A.Closure, [C._CupertinoRadioState__defaultOuterColor_closure, C._CupertinoRadioState__defaultInnerColor_closure, C._CupertinoRadioState__defaultBorderColor_closure, C._CupertinoRadioState_build_closure, C._RadioState__widgetFillColor_closure, C._RadioState_build_closure, C._RadioDefaultsM3_fillColor_closure, C._RadioDefaultsM3_overlayColor_closure]);
    _inheritMany(A.ToggleablePainter, [C._RadioPainter0, C._RadioPainter]);
    _inherit(C.__RadioState_State_TickerProviderStateMixin_ToggleableStateMixin, C.__RadioState_State_TickerProviderStateMixin);
    _inherit(C._RadioState, C.__RadioState_State_TickerProviderStateMixin_ToggleableStateMixin);
    _inherit(C._RadioDefaultsM3, A.RadioThemeData);
    _inherit(C.RadioListTile, A.StatelessWidget);
    _inherit(C.RadioListTile_build_closure, A.Closure0Args);
    _mixinHard(C.__CupertinoRadioState_State_TickerProviderStateMixin, A.TickerProviderStateMixin);
    _mixinHard(C.__CupertinoRadioState_State_TickerProviderStateMixin_ToggleableStateMixin, A.ToggleableStateMixin);
    _mixinHard(C.__RadioState_State_TickerProviderStateMixin, A.TickerProviderStateMixin);
    _mixinHard(C.__RadioState_State_TickerProviderStateMixin_ToggleableStateMixin, A.ToggleableStateMixin);
  })();
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"CupertinoRadio":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoRadioState":{"State":["CupertinoRadio<1>"]},"_RadioPainter0":{"Listenable":[]},"Radio":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RadioState":{"State":["Radio<1>"]},"_RadioPainter":{"Listenable":[]},"RadioListTile":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"RadioTheme":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"__CupertinoRadioState_State_TickerProviderStateMixin":1,"__CupertinoRadioState_State_TickerProviderStateMixin_ToggleableStateMixin":1,"__RadioState_State_TickerProviderStateMixin":1,"__RadioState_State_TickerProviderStateMixin_ToggleableStateMixin":1}'));
  var type$ = {
    JSArray_Color: A.findType("JSArray<Color>"),
    MouseCursor: A.findType("MouseCursor0"),
    RadioTheme: A.findType("RadioTheme"),
    WidgetState: A.findType("WidgetState"),
    _WidgetStatePropertyWith_Color: A.findType("_WidgetStatePropertyWith<Color>"),
    _WidgetStatePropertyWith_MouseCursor: A.findType("_WidgetStatePropertyWith<MouseCursor0>"),
    _WidgetStatePropertyWith_nullable_Color: A.findType("_WidgetStatePropertyWith<Color?>"),
    nullable_MouseCursor: A.findType("MouseCursor0?")
  };
  (function constants() {
    D.ValueKey_charSelect = new A.ValueKey("charSelect", A.findType("ValueKey<String>"));
    D.Color_LYu = new A.Color(0.25098039215686274, 0, 0, 0, B.ColorSpace_0);
    D.CupertinoDynamicColor_14C = new A.CupertinoDynamicColor(D.Color_LYu, null, null, D.Color_LYu, E.Color_Xuf, D.Color_LYu, E.Color_Xuf, D.Color_LYu, E.Color_Xuf, D.Color_LYu, E.Color_Xuf);
    D.CupertinoDynamicColor_G0s = new A.CupertinoDynamicColor(D.Color_LYu, null, null, D.Color_LYu, D.Color_LYu, D.Color_LYu, D.Color_LYu, D.Color_LYu, D.Color_LYu, D.Color_LYu, D.Color_LYu);
    D.Color_oDj = new A.Color(1, 0.8196078431372549, 0.8196078431372549, 0.8392156862745098, B.ColorSpace_0);
    D.CupertinoDynamicColor_Zrq = new A.CupertinoDynamicColor(D.Color_oDj, null, null, D.Color_oDj, D.Color_LYu, D.Color_oDj, D.Color_LYu, D.Color_oDj, D.Color_LYu, D.Color_oDj, D.Color_LYu);
    D.Color_7CT = new A.Color(1, 0.8705882352941177, 0.9098039215686274, 0.9725490196078431, B.ColorSpace_0);
    D.CupertinoDynamicColor_eMV = new A.CupertinoDynamicColor(B.Color_wst, null, null, B.Color_wst, D.Color_7CT, B.Color_wst, D.Color_7CT, B.Color_wst, D.Color_7CT, B.Color_wst, D.Color_7CT);
    D.EdgeInsets_15_15_0_15 = new A.EdgeInsets(15, 15, 0, 15);
    D.Size_18_18 = new A.Size(18, 18);
    D.TextStyle_jMX = new A.TextStyle(true, null, null, "Palatino", null, null, 57, B.FontWeight_6_700, null, null, null, null, 1.1228070175438596, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.TextStyle_NYf = new A.TextStyle(true, null, null, "Palatino", null, null, 45, B.FontWeight_5_600, null, null, null, null, 1.1555555555555554, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.TextStyle_odY = new A.TextStyle(true, null, null, "Palatino", null, null, 36, B.FontWeight_4_500, null, null, null, null, 1.2222222222222223, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.TextStyle_0xQ = new A.TextStyle(true, null, null, "Palatino", null, null, 22, B.FontWeight_3_400, null, null, null, null, 1.2727272727272727, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.TextStyle_pzi = new A.TextStyle(true, null, null, "Palatino", null, null, 16, B.FontWeight_2_300, null, null, null, null, 1.5, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.TextStyle_qiJ = new A.TextStyle(true, null, null, "Palatino", null, null, 14, B.FontWeight_5_600, null, null, null, null, 1.4285714285714286, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.TextStyle_v7X = new A.TextStyle(true, null, null, "Palatino", null, null, 16, B.FontWeight_3_400, null, null, null, null, 1.5, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.TextStyle_X67 = new A.TextStyle(true, null, null, "Palatino", null, null, 14, B.FontWeight_2_300, null, null, null, null, 1.4285714285714286, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.FontStyle_1 = new C.FontStyle(1, "italic");
    D.TextStyle_wGl = new A.TextStyle(true, null, null, "Palatino", null, null, 12, B.FontWeight_1_200, D.FontStyle_1, null, null, null, 1.3333333333333333, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.TextStyle_6Gl = new A.TextStyle(true, null, null, "Palatino", null, null, 14, B.FontWeight_4_500, null, null, null, null, 1.4285714285714286, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.TextStyle_lU2 = new A.TextStyle(true, null, null, "Palatino", null, null, 12, B.FontWeight_4_500, D.FontStyle_1, null, null, null, 1.3333333333333333, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.TextStyle_A4V = new A.TextStyle(true, null, null, "Palatino", null, null, 11, B.FontWeight_4_500, D.FontStyle_1, null, null, null, 1.4545454545454546, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.TextTheme_aMm = new A.TextTheme(D.TextStyle_jMX, D.TextStyle_NYf, D.TextStyle_odY, B.TextStyle_Hj9, B.TextStyle_2yG, B.TextStyle_Zc1, D.TextStyle_0xQ, D.TextStyle_pzi, D.TextStyle_qiJ, D.TextStyle_v7X, D.TextStyle_X67, D.TextStyle_wGl, D.TextStyle_6Gl, D.TextStyle_lU2, D.TextStyle_A4V);
    D._RadioType_0 = new C._RadioType(0, "material");
    D._RadioType_00 = new C._RadioType0(0, "material");
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "_kDisabledOuterColor", "$get$_kDisabledOuterColor", () => B.Color_wst.withOpacity$1(0.5));
    _lazyFinal($, "bookTheme", "$get$bookTheme", () => A.ThemeData_ThemeData$from($.$get$colorScheme(), D.TextTheme_aMm, true));
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_57", e: "endPart", h: h});
})($__dart_deferred_initializers__, "6RNp2IrZKN6VF5ZHpVOOxbRGw2c=");
;