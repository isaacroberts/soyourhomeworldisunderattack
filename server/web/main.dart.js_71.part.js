// Generated by dart2js (, trust primitives, omit checks, lax runtime type, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.8.0.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_71", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, B, D,
  A = {SawTooth: function SawTooth(t0) {
      this.count = t0;
    }, _ActivityIndicatorType: function _ActivityIndicatorType(t0, t1) {
      this.index = t0;
      this._name = t1;
    }, ProgressIndicator: function ProgressIndicator() {
    }, _CircularProgressIndicatorPainter: function _CircularProgressIndicatorPainter(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _.trackColor = t0;
      _.valueColor = t1;
      _.value = t2;
      _.headValue = t3;
      _.tailValue = t4;
      _.offsetValue = t5;
      _.rotationValue = t6;
      _.strokeWidth = t7;
      _.strokeAlign = t8;
      _.arcStart = t9;
      _.arcSweep = t10;
      _.strokeCap = t11;
      _.trackGap = t12;
      _.year2023 = t13;
      _._repaint = t14;
    }, CircularProgressIndicator: function CircularProgressIndicator(t0, t1) {
      this.color = t0;
      this.key = t1;
    }, _CircularProgressIndicatorState: function _CircularProgressIndicatorState(t0, t1) {
      var _ = this;
      _.___CircularProgressIndicatorState__controller_A = $;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._framework$_element = _._widget = null;
    }, _CircularProgressIndicatorState__buildAnimation_closure: function _CircularProgressIndicatorState__buildAnimation_closure(t0) {
      this.$this = t0;
    }, _CircularProgressIndicatorDefaultsM2: function _CircularProgressIndicatorDefaultsM2(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15) {
      var _ = this;
      _.context = t0;
      _.___CircularProgressIndicatorDefaultsM2__colors_FI = $;
      _.color = t1;
      _.linearTrackColor = t2;
      _.linearMinHeight = t3;
      _.circularTrackColor = t4;
      _.refreshBackgroundColor = t5;
      _.borderRadius = t6;
      _.stopIndicatorColor = t7;
      _.stopIndicatorRadius = t8;
      _.strokeWidth = t9;
      _.strokeAlign = t10;
      _.strokeCap = t11;
      _.constraints = t12;
      _.trackGap = t13;
      _.circularTrackPadding = t14;
      _.year2023 = t15;
    }, _CircularProgressIndicatorDefaultsM3Year2023: function _CircularProgressIndicatorDefaultsM3Year2023(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15) {
      var _ = this;
      _.context = t0;
      _.___CircularProgressIndicatorDefaultsM3Year2023__colors_FI = $;
      _.color = t1;
      _.linearTrackColor = t2;
      _.linearMinHeight = t3;
      _.circularTrackColor = t4;
      _.refreshBackgroundColor = t5;
      _.borderRadius = t6;
      _.stopIndicatorColor = t7;
      _.stopIndicatorRadius = t8;
      _.strokeWidth = t9;
      _.strokeAlign = t10;
      _.strokeCap = t11;
      _.constraints = t12;
      _.trackGap = t13;
      _.circularTrackPadding = t14;
      _.year2023 = t15;
    }, __CircularProgressIndicatorState_State_SingleTickerProviderStateMixin: function __CircularProgressIndicatorState_State_SingleTickerProviderStateMixin() {
    },
    ProgressIndicatorTheme_of(context) {
      var t1;
      context.dependOnInheritedWidgetOfExactType$1$0(type$.ProgressIndicatorTheme);
      t1 = B.Theme_of(context);
      return t1.progressIndicatorTheme;
    },
    ErrorList_showError(e, trace) {
      var t1,
        holder = new B.ExceptionHolder(e, trace == null ? B.StackTrace_current() : trace);
      $.$get$ErrorList_instance().list.push(holder);
      t1 = $.$get$ErrorList_instance();
      if (t1.firstErrorOfType$1(holder))
        t1._snackbarWaiting.push(holder);
    }
  },
  C;
  J = holdersList[1];
  B = holdersList[0];
  D = holdersList[2];
  A = hunkHelpers.updateHolder(holdersList[49], A);
  C = holdersList[110];
  A.SawTooth.prototype = {
    transformInternal$1(t) {
      t *= this.count;
      return t - (t < 0 ? Math.ceil(t) : Math.floor(t));
    },
    toString$0(_) {
      return "SawTooth(" + this.count + ")";
    }
  };
  A._ActivityIndicatorType.prototype = {
    _enumToString$0() {
      return "_ActivityIndicatorType." + this._name;
    }
  };
  A.ProgressIndicator.prototype = {};
  A._CircularProgressIndicatorPainter.prototype = {
    paint$2(canvas, size) {
      var paint, t1, strokeOffset, t2, t3, t4, backgroundPaint, _this = this;
      $.$get$_renderer();
      paint = B.CkPaint$();
      paint._colorValue = _this.valueColor.get$value();
      t1 = paint.strokeWidth = _this.strokeWidth;
      paint.style = D.PaintingStyle_1;
      strokeOffset = t1 / 2 * -_this.strokeAlign;
      t2 = strokeOffset * 2;
      t3 = size._dx - t2;
      t2 = size._dy - t2;
      t4 = _this.trackColor;
      if (t4 != null) {
        backgroundPaint = B.CkPaint$();
        backgroundPaint._colorValue = t4.get$value();
        backgroundPaint.strokeWidth = t1;
        backgroundPaint.strokeCap = D.StrokeCap_1;
        backgroundPaint.style = D.PaintingStyle_1;
        canvas.__engine$_canvas.drawArc$5(new B.Rect(strokeOffset, strokeOffset, strokeOffset + t3, strokeOffset + t2), 0, 6.282185307179586, false, backgroundPaint);
      }
      paint.strokeCap = C.StrokeCap_2;
      canvas.__engine$_canvas.drawArc$5(new B.Rect(strokeOffset, strokeOffset, strokeOffset + t3, strokeOffset + t2), _this.arcStart, _this.arcSweep, false, paint);
    },
    shouldRepaint$1(oldPainter) {
      var _this = this,
        t1 = true;
      if (J.$eq$(oldPainter.trackColor, _this.trackColor))
        if (oldPainter.valueColor.$eq(0, _this.valueColor))
          if (oldPainter.headValue === _this.headValue)
            if (oldPainter.tailValue === _this.tailValue)
              if (oldPainter.offsetValue === _this.offsetValue)
                if (oldPainter.rotationValue === _this.rotationValue)
                  if (oldPainter.strokeWidth === _this.strokeWidth)
                    if (oldPainter.strokeAlign === _this.strokeAlign)
                      t1 = oldPainter.trackGap != _this.trackGap;
      return t1;
    }
  };
  A.CircularProgressIndicator.prototype = {
    createState$0() {
      return new A._CircularProgressIndicatorState(null, null);
    }
  };
  A._CircularProgressIndicatorState.prototype = {
    initState$0() {
      var t1, _this = this;
      _this.super$State$initState();
      t1 = B.AnimationController$(null, C.Duration_2961926000, null, null, _this);
      _this.___CircularProgressIndicatorState__controller_A = t1;
      _this._widget.toString;
      t1.repeat$0();
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2;
      this.super$State$didUpdateWidget(oldWidget);
      this._widget.toString;
      t1 = this.___CircularProgressIndicatorState__controller_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t2 = t1._ticker;
      t2 = !(t2 != null && t2._ticker$_future != null);
      if (t2)
        t1.repeat$0();
    },
    dispose$0() {
      var t1 = this.___CircularProgressIndicatorState__controller_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.dispose$0();
      this.super$__CircularProgressIndicatorState_State_SingleTickerProviderStateMixin$dispose();
    },
    _buildMaterialIndicator$5(context, headValue, tailValue, offsetValue, rotationValue) {
      var t1, trackColor, strokeWidth, strokeAlign, constraints, effectivePadding, t2, t3, result, _this = this, _null = null,
        indicatorTheme = A.ProgressIndicatorTheme_of(context);
      _this._widget.toString;
      B.Theme_of(context);
      switch (true) {
        case true:
          _this._widget.toString;
          t1 = new A._CircularProgressIndicatorDefaultsM3Year2023(context, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
          break;
        case false:
          _this._widget.toString;
          t1 = new A._CircularProgressIndicatorDefaultsM2(context, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
          break;
        default:
          t1 = _null;
      }
      _this._widget.toString;
      trackColor = indicatorTheme.circularTrackColor;
      if (trackColor == null)
        trackColor = t1.circularTrackColor;
      _this._widget.toString;
      strokeWidth = indicatorTheme.strokeWidth;
      if (strokeWidth == null)
        strokeWidth = t1.get$strokeWidth();
      _this._widget.toString;
      strokeAlign = indicatorTheme.strokeAlign;
      if (strokeAlign == null)
        strokeAlign = t1.get$strokeAlign();
      _this._widget.toString;
      constraints = indicatorTheme.constraints;
      if (constraints == null)
        constraints = t1.get$constraints();
      _this._widget.toString;
      effectivePadding = indicatorTheme.circularTrackPadding;
      if (effectivePadding == null)
        effectivePadding = t1.circularTrackPadding;
      t2 = _this._widget;
      t2.toString;
      t1 = t1.get$color();
      t2 = t2.color;
      if (t2 == null)
        t2 = A.ProgressIndicatorTheme_of(context).color;
      t1 = t2 == null ? t1 : t2;
      _this._widget.toString;
      t2 = tailValue * 3 / 2 * 3.141592653589793;
      t3 = Math.max(headValue * 3 / 2 * 3.141592653589793 - t2, 0.001);
      result = new B.ConstrainedBox(constraints, B.CustomPaint$(_null, _null, false, _null, new A._CircularProgressIndicatorPainter(trackColor, t1, _null, headValue, tailValue, offsetValue, rotationValue, strokeWidth, strokeAlign, -1.5707963267948966 + t2 + rotationValue * 3.141592653589793 * 2 + offsetValue * 0.5 * 3.141592653589793, t3, indicatorTheme.strokeCap, _null, true, _null), D.Size_0_0, false), _null);
      if (effectivePadding != null)
        result = new B.Padding(effectivePadding, result, _null);
      return new B.Semantics(B.SemanticsProperties$(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, D.SemanticsValidationResult_0, _null), false, false, false, false, result, _null);
    },
    _buildAnimation$0() {
      var t1 = this.___CircularProgressIndicatorState__controller_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      return B.AnimatedBuilder$(t1, new A._CircularProgressIndicatorState__buildAnimation_closure(this), null);
    },
    build$1(context) {
      this._widget.toString;
      switch (0) {
        case 0:
          return this._buildAnimation$0();
      }
    }
  };
  A._CircularProgressIndicatorDefaultsM2.prototype = {
    get$color() {
      var t1, _this = this,
        value = _this.___CircularProgressIndicatorDefaultsM2__colors_FI;
      if (value === $) {
        t1 = B.Theme_of(_this.context);
        _this.___CircularProgressIndicatorDefaultsM2__colors_FI !== $ && B.throwUnnamedLateFieldADI();
        value = _this.___CircularProgressIndicatorDefaultsM2__colors_FI = t1.colorScheme;
      }
      return value.primary;
    },
    get$strokeWidth() {
      return 4;
    },
    get$strokeAlign() {
      return 0;
    },
    get$constraints() {
      return C.BoxConstraints_rW9;
    }
  };
  A._CircularProgressIndicatorDefaultsM3Year2023.prototype = {
    get$color() {
      var t1, _this = this,
        value = _this.___CircularProgressIndicatorDefaultsM3Year2023__colors_FI;
      if (value === $) {
        t1 = B.Theme_of(_this.context);
        _this.___CircularProgressIndicatorDefaultsM3Year2023__colors_FI !== $ && B.throwUnnamedLateFieldADI();
        value = _this.___CircularProgressIndicatorDefaultsM3Year2023__colors_FI = t1.colorScheme;
      }
      return value.primary;
    },
    get$strokeWidth() {
      return 4;
    },
    get$strokeAlign() {
      return 0;
    },
    get$constraints() {
      return C.BoxConstraints_rW9;
    }
  };
  A.__CircularProgressIndicatorState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0() {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(_this.get$_updateTicker());
      _this.SingleTickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  var typesOffset = hunkHelpers.updateTypes([]);
  A._CircularProgressIndicatorState__buildAnimation_closure.prototype = {
    call$2(context, child) {
      var t1 = this.$this,
        t2 = $.$get$_CircularProgressIndicatorState__strokeHeadTween(),
        t3 = t1.___CircularProgressIndicatorState__controller_A;
      t3 === $ && B.throwUnnamedLateFieldNI();
      return t1._buildMaterialIndicator$5(context, t2.transform$1(t3.get$value()), $.$get$_CircularProgressIndicatorState__strokeTailTween().transform$1(t1.___CircularProgressIndicatorState__controller_A.get$value()), $.$get$_CircularProgressIndicatorState__offsetTween().transform$1(t1.___CircularProgressIndicatorState__controller_A.get$value()), $.$get$_CircularProgressIndicatorState__rotationTween().transform$1(t1.___CircularProgressIndicatorState__controller_A.get$value()));
    },
    $signature: 60
  };
  (function aliases() {
    var _ = A.__CircularProgressIndicatorState_State_SingleTickerProviderStateMixin.prototype;
    _.super$__CircularProgressIndicatorState_State_SingleTickerProviderStateMixin$dispose = _.dispose$0;
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.SawTooth, B.Curve);
    _inherit(A._ActivityIndicatorType, B._Enum);
    _inherit(A.ProgressIndicator, B.StatefulWidget);
    _inherit(A._CircularProgressIndicatorPainter, B.CustomPainter);
    _inherit(A.CircularProgressIndicator, A.ProgressIndicator);
    _inherit(A.__CircularProgressIndicatorState_State_SingleTickerProviderStateMixin, B.State);
    _inherit(A._CircularProgressIndicatorState, A.__CircularProgressIndicatorState_State_SingleTickerProviderStateMixin);
    _inherit(A._CircularProgressIndicatorState__buildAnimation_closure, B.Closure2Args);
    _inheritMany(B.ProgressIndicatorThemeData, [A._CircularProgressIndicatorDefaultsM2, A._CircularProgressIndicatorDefaultsM3Year2023]);
    _mixinHard(A.__CircularProgressIndicatorState_State_SingleTickerProviderStateMixin, B.SingleTickerProviderStateMixin);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"SawTooth":{"Curve":[]},"CircularProgressIndicator":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"ProgressIndicator":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CircularProgressIndicatorPainter":{"Listenable":[]},"_CircularProgressIndicatorState":{"State":["CircularProgressIndicator"]},"ProgressIndicatorTheme":{"InheritedTheme":[],"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  var type$ = {
    ProgressIndicatorTheme: B.findType("ProgressIndicatorTheme")
  };
  (function constants() {
    C.BoxConstraints_rW9 = new B.BoxConstraints(36, 1 / 0, 36, 1 / 0);
    C._ActivityIndicatorType_0 = new A._ActivityIndicatorType(0, "material");
    C.Duration_2961926000 = new B.Duration(2961926000);
    C.Interval_kwb = new B.Interval(0.5, 1, D.Cubic_Dkk);
    C.Interval_owy = new B.Interval(0, 0.5, D.Cubic_Dkk);
    C.SawTooth_1333 = new A.SawTooth(1333);
    C.SawTooth_2222 = new A.SawTooth(2222);
    C.StrokeCap_2 = new B.StrokeCap(2, "square");
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "_CircularProgressIndicatorState__strokeHeadTween", "$get$_CircularProgressIndicatorState__strokeHeadTween", () => B.CurveTween$(C.Interval_owy).chain$1(B.CurveTween$(C.SawTooth_2222)));
    _lazyFinal($, "_CircularProgressIndicatorState__strokeTailTween", "$get$_CircularProgressIndicatorState__strokeTailTween", () => B.CurveTween$(C.Interval_kwb).chain$1(B.CurveTween$(C.SawTooth_2222)));
    _lazyFinal($, "_CircularProgressIndicatorState__offsetTween", "$get$_CircularProgressIndicatorState__offsetTween", () => B.CurveTween$(C.SawTooth_2222));
    _lazyFinal($, "_CircularProgressIndicatorState__rotationTween", "$get$_CircularProgressIndicatorState__rotationTween", () => B.CurveTween$(C.SawTooth_1333));
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_71", e: "endPart", h: h});
})($__dart_deferred_initializers__, "whqu+Bw2kWE5tx/y/5o/HwPWYB4=");
;