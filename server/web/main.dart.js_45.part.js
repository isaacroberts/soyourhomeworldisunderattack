// Generated by dart2js (, trust primitives, omit checks, lax runtime type, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.8.0.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_45", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var A, C,
  B = {
    MaterialButton$(child, color, onPressed, padding, shape) {
      return new B.MaterialButton(onPressed, color, child, padding, shape, null);
    },
    MaterialButton: function MaterialButton(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.onPressed = t0;
      _.color = t1;
      _.child = t2;
      _.padding = t3;
      _.shape = t4;
      _.key = t5;
    }
  };
  A = holdersList[0];
  C = holdersList[2];
  B = hunkHelpers.updateHolder(holdersList[53], B);
  B.MaterialButton.prototype = {
    get$enabled() {
      return this.onPressed != null;
    },
    build$1(context) {
      var theme0, buttonTheme, t1, t2, t3, t4, t5, t6, t7, _this = this, _null = null,
        theme = A.Theme_of(context);
      context.dependOnInheritedWidgetOfExactType$1$0(type$.ButtonTheme);
      theme0 = A.Theme_of(context);
      buttonTheme = theme0.buttonTheme;
      if (buttonTheme.colorScheme == null) {
        t1 = buttonTheme.colorScheme;
        if (t1 == null)
          t1 = theme0.colorScheme;
        t2 = buttonTheme.get$padding();
        t3 = buttonTheme.get$shape();
        buttonTheme = A.ButtonThemeData$(false, buttonTheme._buttonColor, t1, buttonTheme._disabledColor, buttonTheme._focusColor, buttonTheme.height, buttonTheme._highlightColor, buttonTheme._hoverColor, buttonTheme.layoutBehavior, buttonTheme._materialTapTargetSize, buttonTheme.minWidth, t2, t3, buttonTheme._splashColor, buttonTheme.textTheme);
      }
      t1 = buttonTheme.getFillColor$1(_this);
      t2 = theme.textTheme.labelLarge;
      t2.toString;
      t2 = t2.copyWith$1$color(buttonTheme.getTextColor$1(_this));
      t3 = buttonTheme._focusColor;
      if (t3 == null)
        t3 = buttonTheme.getTextColor$1(_this).withOpacity$1(0.12);
      t4 = buttonTheme._hoverColor;
      if (t4 == null)
        t4 = buttonTheme.getTextColor$1(_this).withOpacity$1(0.04);
      t5 = buttonTheme.getPadding$1(_this);
      t6 = new A.BoxConstraints(buttonTheme.minWidth, 1 / 0, buttonTheme.height, 1 / 0).copyWith$2$minHeight$minWidth(_null, _null);
      t7 = _this.shape;
      if (t7 == null)
        t7 = buttonTheme.get$shape();
      return A.RawMaterialButton$(C.Duration_200000, false, _this.child, C.Clip_0, t6, 0, 2, true, t1, t3, 4, _null, theme.highlightColor, 8, t4, 4, theme.materialTapTargetSize, _null, _null, _null, _this.onPressed, t5, t7, theme.splashColor, t2, theme.visualDensity);
    }
  };
  var typesOffset = hunkHelpers.updateTypes([]);
  (function inheritance() {
    var _inherit = hunkHelpers.inherit;
    _inherit(B.MaterialButton, A.StatelessWidget);
  })();
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"MaterialButton":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"ButtonTheme":{"InheritedTheme":[],"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  var type$ = {
    ButtonTheme: A.findType("ButtonTheme")
  };
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_45", e: "endPart", h: h});
})($__dart_deferred_initializers__, "vZpyVuwJRNdMqXhGlwvmin8ajlU=");
;